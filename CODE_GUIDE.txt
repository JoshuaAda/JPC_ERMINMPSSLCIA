FOLDERS
parametric_OP_data:
- Optimization problem instances considered in this paper.
- The sampled solutions for testing could not be provided due to the file size limit for the supplementary material. The solutions can be sampled using the "generate_OPs.py" script.

robust_case_study:
- Results of all optimization problems considered in this work.
- The individual optimization problems and the corresponding "config.json" and "eval.json" files can be found in the subfolders named after the optimization problem instance.

CODE FILES
environment.yml:
- Specifies a Conda environment named "env_solverLearning_gpu"
- Lists required packages and their versions for this work
- Includes dependencies for PyTorch, CUDA, optimization solvers, and other scientific computing tools

parametric_OP.py:
- Defines a parametricOP class for creating and managing optimization problems
- Supports various objective types (quadratic, nonconvex, Rosenbrock, etc.)
- Provides methods for problem setup, solving, and analysis
- Implements functions for KKT conditions, gradients, and other optimality criteria
- Includes CasADi and OSQP solver integrations for solving the problems

generate_OPs.py:
- Generates parametric optimization problems (OPs)
- Allows specifying problem dimensions and types
- Creates and saves OP configurations
- Optionally samples solutions using OSQP or CasADi solvers

models.py:
- Defines key classes and functions for the neural network models:
- - FeedforwardNN: Basic feedforward neural network architecture
- - TrainLogger: Logging and visualization utilities for training
- - Predictor: Neural network for predicting initial solutions
- - Solver: Neural network for iteratively solving optimization problems
- Implements training procedures for predictors and solvers
- Provides methods for saving/loading models and weights
- Includes utilities for exporting models to JIT format
- Defines various solver step functions and batch solving methods

training.py:
- Implements the main training loop for predictors and solvers
- Loads optimization problem configurations and model hyperparameters
- Handles training of predictor and solver models separately (LISCO without predictor) or together (LISCO with predictor)
- Manages logging, visualization, and saving of training results
- Supports different training modes (predictor, solver without predictor, solver with predictor)

configuration setup scripts: predictor_sweep_config.py, solver_no_pred_sweep_config.py & solver_with_pred_sweep_config.py
- Use UUID for unique experiment identification
- Allow for appending new configurations to existing ones
- Save the generated configurations as JSON files
- Share common settings like optimization problem names and results directory
- Configures experiments for training predictors and solvers (with or without pre-trained predictor)
- Defines parameters for the predictor and solver networks
- Loads existing predictor configurations and matches them with solver settings
- Generates configurations for solver experiments with different neuron counts

evaluation.py:
- Implements the evaluation pipeline for trained models
- Supports evaluation of predictors, solvers without predictors, and solvers with predictors
- Loads optimization problems, test data, and trained models
- Performs detailed evaluations including:
- - Optimality conditions
- - Distance to optimal solutions
- - Constraint violations
- - Optimality gaps
- - Convergence trajectories
- Measures inference speeds and solver step times
- Generates visualizations of solver trajectories
- Saves evaluation results for further analysis


